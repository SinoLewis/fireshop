<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shoals on Fireshop</title>
    <link>https://fireshop.com/shoals/</link>
    <description>Recent content in Shoals on Fireshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Oct 2022 19:39:39 +0000</lastBuildDate><atom:link href="https://fireshop.com/shoals/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Brown Perfume</title>
      <link>https://fireshop.com/shoals/brown-perfume/</link>
      <pubDate>Sat, 22 Oct 2022 19:39:39 +0000</pubDate>
      
      <guid>https://fireshop.com/shoals/brown-perfume/</guid>
      <description>Cloud providers and web application frameworks go to great lengths to protect you from writing insecure code. The Cloud provides secure defaults and monitoring for your infrastructure, while Angular and React automatically sanitize HTML to prevent the injection of malicious JavaScript. Despite these safeguards, no application is 100%, secure and clever new exploits will be discovered. The following lesson explains some of the most common hacking techniques and how to secure your app against them.</description>
    </item>
    
    <item>
      <title>Eau De Perfume Spray</title>
      <link>https://fireshop.com/shoals/eau-de-perfume-spray/</link>
      <pubDate>Sat, 22 Oct 2022 19:39:39 +0000</pubDate>
      
      <guid>https://fireshop.com/shoals/eau-de-perfume-spray/</guid>
      <description>One of the most commonly encountered limitations of Cloud Firestore (and GCP) is full-text search. This functionality is essential if you need to query complex text patterns in a database or filter results by multiple dynamic properties. My favorite solution to this limitation is Algolia, which provides a powerful, developer-friendly, search &amp;amp; discovery API. In the following lesson you will learn how to sync your Firestore data to an Algolia index via Cloud Functions.</description>
    </item>
    
    <item>
      <title>Handcraft Chinese style</title>
      <link>https://fireshop.com/shoals/handcraft-chinese-style/</link>
      <pubDate>Sat, 22 Oct 2022 19:39:39 +0000</pubDate>
      
      <guid>https://fireshop.com/shoals/handcraft-chinese-style/</guid>
      <description>In the previous lesson, we learned the fundamentals of relational data modeling with Firestore. Today I want to push further and look at several more practical examples. In addition to data modeling, we will look at techniques like duplication, aggregation, composite keys, bucketing, and more.
Keep in mind, Firestore is still in beta. Firebase engineers hinted at some really cool features on the roadmap (geo queries, query by array of ids) - I&#39;ll be sure to keep you posted :)</description>
    </item>
    
    <item>
      <title>HP Pavilion 15-DK1056WM</title>
      <link>https://fireshop.com/shoals/hp-pavilion-15-dk1056wm/</link>
      <pubDate>Sat, 22 Oct 2022 19:39:39 +0000</pubDate>
      
      <guid>https://fireshop.com/shoals/hp-pavilion-15-dk1056wm/</guid>
      <description>The following lesson uses the Cloud Vision API on Google Cloud to extract text from raw images. This is a highly sought-after feature in business applications that still work with non-digitized text documents.
The Cloud Vision Node.js documentation is a good reference to keep by your side.
Getting Started You actually don&amp;rsquo;t need a frontend app to experiment with this technology - just a Firebase storage bucket. I recommend creating a dedicated bucket for the invocation of cloud functions.</description>
    </item>
    
    <item>
      <title>iPhone 9</title>
      <link>https://fireshop.com/shoals/iphone-9/</link>
      <pubDate>Sat, 22 Oct 2022 19:39:39 +0000</pubDate>
      
      <guid>https://fireshop.com/shoals/iphone-9/</guid>
      <description>The following article discusses patterns that I have found exceptionally useful when implementing Firebase User Authentication and Firestore in Flutter. In particular, the Provider provides an excellent solution for sharing and managing streams with minimal boilerplate. However, to take full advantage of this package you must deserialize your raw data to a Dart class.
If you are building a major project with Flutter &amp;amp; Firebase, consider enrolling in the Full Flutter Firebase Course.</description>
    </item>
    
    <item>
      <title>perfume Oil</title>
      <link>https://fireshop.com/shoals/perfume-oil/</link>
      <pubDate>Sat, 22 Oct 2022 19:39:39 +0000</pubDate>
      
      <guid>https://fireshop.com/shoals/perfume-oil/</guid>
      <description>The following lesson uses the Cloud Vision API on Google Cloud to extract text from raw images. This is a highly sought-after feature in business applications that still work with non-digitized text documents.
The Cloud Vision Node.js documentation is a good reference to keep by your side.
Getting Started You actually don&amp;rsquo;t need a frontend app to experiment with this technology - just a Firebase storage bucket. I recommend creating a dedicated bucket for the invocation of cloud functions.</description>
    </item>
    
    <item>
      <title>Tree Oil 30ml</title>
      <link>https://fireshop.com/shoals/tree-oil-30ml/</link>
      <pubDate>Sat, 22 Oct 2022 19:39:39 +0000</pubDate>
      
      <guid>https://fireshop.com/shoals/tree-oil-30ml/</guid>
      <description>The following lesson uses the Cloud Vision API on Google Cloud to extract text from raw images. This is a highly sought-after feature in business applications that still work with non-digitized text documents.
The Cloud Vision Node.js documentation is a good reference to keep by your side.
Getting Started You actually don&amp;rsquo;t need a frontend app to experiment with this technology - just a Firebase storage bucket. I recommend creating a dedicated bucket for the invocation of cloud functions.</description>
    </item>
    
  </channel>
</rss>
